// --- B∆Ø·ªöC 1: IMPORT C√ÅC TH∆Ø VI·ªÜN V√Ä MODULE C·∫¶N THI·∫æT ---
console.log("---[1] B·∫ÆT ƒê·∫¶U FILE SERVER.JS ---");
require("dotenv").config();
const express = require("express");
const cors = require("cors");
const mongoose = require("mongoose");
const cookieSession = require("cookie-session");
const passport = require("passport");

// Import c√°c file routes v√† c·∫•u h√¨nh c·ªßa ·ª©ng d·ª•ng
const authRoutes = require("./routes/authRoutes");
const imageRoutes = require("./routes/imageRoutes");
const healthRoutes = require("./routes/healthRoutes");
require("./config/Passports"); // Ch·∫°y file ƒë·ªÉ c·∫•u h√¨nh Passport

// --- B∆Ø·ªöC 2: KH·ªûI T·∫†O ·ª®NG D·ª§NG EXPRESS ---
const app = express();
const PORT = process.env.PORT || 8000;

// --- B∆Ø·ªöC 3: C·∫§U H√åNH C√ÅC MIDDLEWARE ---

// Cho ph√©p Cross-Origin Resource Sharing (CORS) ƒë·ªÉ frontend c√≥ th·ªÉ g·ªçi API
app.use(
  cors({
    origin: process.env.CLIENT_URL, // Ch·ªâ cho ph√©p domain c·ªßa frontend
    credentials: true, // Cho ph√©p g·ª≠i cookie
  })
);

// Middleware ƒë·ªÉ ph√¢n t√≠ch body c·ªßa request d∆∞·ªõi d·∫°ng JSON
app.use(express.json());
// Middleware ƒë·ªÉ ph√¢n t√≠ch body c·ªßa request t·ª´ form (URL-encoded)
app.use(express.urlencoded({ extended: true }));
console.log("---[2] TR∆Ø·ªöC KHI C·∫§U H√åNH SESSION ---");

// C·∫•u h√¨nh session b·∫±ng cookie-session
app.use(
  cookieSession({
    name: "gemini-session",
    keys: [process.env.SESSION_SECRET], // Kh√≥a b√≠ m·∫≠t ƒë·ªÉ m√£ h√≥a cookie
    maxAge: 24 * 60 * 60 * 1000, // Session t·ªìn t·∫°i trong 24 gi·ªù
  })
);
console.log("---[3] SAU KHI C·∫§U H√åNH COOKIE-SESSION ---");
app.use(function (request, response, next) {
  console.log("---[4] B√äN TRONG MIDDLEWARE V√Å L·ªñI ---");
  if (request.session && !request.session.regenerate) {
    request.session.regenerate = (cb) => {
      cb();
    };
  }
  if (request.session && !request.session.save) {
    request.session.save = (cb) => {
      cb();
    };
  }
  next();
});
console.log("---[5] TR∆Ø·ªöC KHI KH·ªûI T·∫†O PASSPORT ---");

// Kh·ªüi t·∫°o Passport v√† s·ª≠ d·ª•ng session ƒë·ªÉ qu·∫£n l√Ω ƒëƒÉng nh·∫≠p
app.use(passport.initialize());
app.use(passport.session());
console.log("---[6] SAU KHI KH·ªûI T·∫†O PASSPORT ---");

// Middleware ƒë·ªÉ ph·ª•c v·ª• c√°c file tƒ©nh (·∫£nh ƒë√£ upload ho·∫∑c ƒë∆∞·ª£c t·∫°o ra)
app.use("/uploads", express.static("uploads"));
app.use("/generated", express.static("generated"));
app.use("/api/health", healthRoutes);

// --- B∆Ø·ªöC 4: ƒêƒÇNG K√ù C√ÅC API ROUTES ---

// G·∫Øn c√°c route x√°c th·ª±c (login, logout,...) v√†o ƒë∆∞·ªùng d·∫´n /auth
app.use("/auth", authRoutes);

// G·∫Øn c√°c route x·ª≠ l√Ω ·∫£nh (generate, history,...) v√†o ƒë∆∞·ªùng d·∫´n /api/image
// URL cu·ªëi c√πng s·∫Ω l√† /api/image/generate, /api/image/history, v.v.
app.use("/api/image", imageRoutes);
console.log("---[7] ƒê√É ƒêƒÇNG K√ù ROUTES ---");

// --- B∆Ø·ªöC 5: K·∫æT N·ªêI C∆† S·ªû D·ªÆ LI·ªÜU V√Ä KH·ªûI CH·∫†Y SERVER ---

// Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng MONGODB_URI
if (!process.env.MONGODB_URI) {
  console.error(
    "FATAL ERROR: Bi·∫øn MONGODB_URI ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p trong file .env!"
  );
  process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu kh√¥ng c√≥ link DB
}

// K·∫øt n·ªëi t·ªõi MongoDB
mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => {
    console.log("‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng!");

    // Ch·ªâ kh·ªüi ch·∫°y server sau khi ƒë√£ k·∫øt n·ªëi DB th√†nh c√¥ng
    app.listen(PORT, () => {
      console.log(`‚úÖ Server ƒë√£ ch·∫°y th√†nh c√¥ng tr√™n port ${PORT}`);
      console.log(`üöÄ API s·∫µn s√†ng t·∫°i: http://localhost:${PORT}`);
    });
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err.message);
    process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu k·∫øt n·ªëi DB th·∫•t b·∫°i
  });
